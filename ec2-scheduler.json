{
   "AWSTemplateFormatVersion":"2010-09-09",
   "Resources":{
      "Ec2SchedulerLambdaRole":{
         "Type":"AWS::IAM::Role",
         "Properties":{
           "AssumeRolePolicyDocument": {
    					"Statement": [
    						{
    							"Effect": "Allow",
    							"Principal": {
    								"Service": [
    									"lambda.amazonaws.com"
    								]
    							},
    							"Action": [
    								"sts:AssumeRole"
    							]
    						}
    					]
    				},
            "Policies":[{
              "PolicyName": "Ec2SchedulerLambdaPolicy",
              "PolicyDocument": {
               "Version":"2012-10-17",
               "Statement":[
                  {
                     "Effect":"Allow",
                     "Action":[
                        "lambda:InvokeFunction"
                     ],
                     "Resource":"*"
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "ec2:DescribeInstances",
                        "ec2:StopInstances",
                        "ec2:StartInstances",
                        "ec2:DescribeRegions"
                     ],
                     "Resource":"*"
                  },
                  {
                     "Effect":"Allow",
                     "Action":[
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream",
                        "logs:PutLogEvents"
                     ],
                     "Resource":"arn:aws:logs:*:*:*"
                  }
               ]
              }
            }]
         }
      },
      "Ec2SchedulerLambdaPermission":{
         "Type":"AWS::Lambda::Permission",
         "Properties":{
            "Action":"lambda:InvokeFunction",
            "FunctionName":{
               "Fn::GetAtt":[
                  "Ec2SchedulerLambda",
                  "Arn"
               ]
            },
            "Principal":"events.amazonaws.com",
            "SourceArn":{
               "Fn::GetAtt":[
                  "CloudWatchTrigger",
                  "Arn"
               ]
            }
         }
      },
      "CloudWatchTrigger":{
         "Type":"AWS::Events::Rule",
         "Properties":{
            "Description":"CloudWatch event which which will trigger EC2 Scheduler",
            "ScheduleExpression":{
               "Fn::Join":[
                  "",
                  [
                     "cron(0/",
                     {
                        "Ref":"SchedulerMinutes"
                     },
                     " * ? * SUN-THU *)"
                  ]
               ]
            },
            "Targets":[ {
               "Arn": {
                  "Fn::GetAtt":[
                     "Ec2SchedulerLambda",
                     "Arn"
                  ]
               },
               "Id": "Ec2_Scheduler_target"
            }],
            "Name":"Ec2_Scheduler_Rule",
            "State":"ENABLED"
         }
      },
      "Ec2SchedulerLambda":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Code":{
               "ZipFile":{
                  "Fn::Join":[
                     "",
                     [
                        "import os\n",
                        "import boto3\n",
                        "import json\n",
                        "from datetime import datetime\n",
                        "from datetime import timedelta\n",
                        "\n",
                        "def lambda_handler(event, context):\n",
                        "    \n",
                        "    ec2Client = boto3.client('ec2')\n",
                        "    regions = [region['RegionName'] for region in ec2Client.describe_regions()['Regions']]\n",
                        "    #regions = ['eu-north-1']\n",
                        "    currentTime = datetime.now() + timedelta(hours=3)\n",
                        "    \n",
                        "    for regionName in regions:\n",
                        "        print('-------- Region:{0} ---------'.format(regionName))\n",
                        "        ec2Client = boto3.client('ec2', region_name=regionName)\n",
                        "        response = ec2Client.describe_instances(MaxResults=1000)\n",
                        "        \n",
                        "        instancesToStop = []\n",
                        "        instancesToStart = []\n",
                        "        for reservations in response['Reservations']:\n",
                        "            instanceId = ''\n",
                        "            instanceName = ''\n",
                        "            state = ''\n",
                        "            retainInstance = False\n",
                        "            \n",
                        "            for instanceDetails in reservations['Instances']:\n",
                        "                instanceId = instanceDetails['InstanceId']\n",
                        "                \n",
                        "                # ignore spot and scheduled instances\n",
                        "                if 'InstanceLifecycle' in instanceDetails.keys():\n",
                        "                    continue\n",
                        "                \n",
                        "                state = instanceDetails['State']\n",
                        "                if 'Tags' in instanceDetails:\n",
                        "                    for tag in instanceDetails['Tags']:\n",
                        "                        if tag['Key'] == 'Name':\n",
                        "                            instanceName = tag['Value'] if tag['Value'] != '' else 'Instance with no name'\n",
                        "                            \n",
                        "                        if tag['Key'] == 'PowerOff':\n",
                        "                            poweroffTag = tag['Value'].split(':')\n",
                        "                            poweroffTime = currentTime.replace(hour=int(poweroffTag[0]), minute=int(poweroffTag[1])) \n",
                        "                            if  (poweroffTime <= currentTime <= poweroffTime + timedelta(minutes=65)) and (state['Name'] == 'running'):\n",
                        "                                print('instance: {0}({1}) will be shut down'.format(instanceName,instanceId))\n",
                        "                                instancesToStop.append(instanceId)\n",
                        "                                \n",
                        "                        if tag['Key'] == 'PowerOn':\n",
                        "                            poweronTag = tag['Value'].split(':')\n",
                        "                            poweronTime = currentTime.replace(hour=int(poweronTag[0]), minute=int(poweronTag[1])) \n",
                        "                            if  poweronTime <= currentTime <= (poweronTime + timedelta(minutes=",
                                                      {
                                                         "Ref":"SchedulerMinutes"
                                                      },
                                                      ")) and (state['Name'] == 'stopped'):\n",
                        "                                print('instance {0}({1}) will be shut down'.format(instanceName,instanceId))\n",
                        "                                instancesToStart.append(instanceId)\n",
                        "                                \n",
                        "        if (len (instancesToStop) <= 0):\n",
                        "            print ('No Instances found to stop')\n",
                        "        else:\n",
                        "            res = ec2Client.stop_instances(\n",
                        "                InstanceIds = instancesToStop,\n",
                        "                DryRun = False\n",
                        "            )\n",
                        "            \n",
                        "        if (len (instancesToStart) <= 0):\n",
                        "            print ('No Instances found to start')\n",
                        "        else:\n",
                        "            res = ec2Client.start_instances(\n",
                        "                InstanceIds = instancesToStart,\n",
                        "                DryRun = False\n",
                        "            )\n",
                        "            \n",
                        "            \n",
                        "        print ('~~~~~~ Region {0} - Stopped {1} instnaces ~~~~~~'.format(regionName, len(instancesToStop)))\n",
                        "        print ('~~~~~~ Region {0} - Started {1} instnaces ~~~~~~'.format(regionName, len(instancesToStart)))\n"
                     ]
                  ]
               }
            },
            "Description":"Lambda to Start/Stop instances",
            "FunctionName":"Ec2SchedulerLambda",
            "Handler":"index.lambda_handler",
            "Timeout": 60,
            "Role":{
               "Fn::GetAtt":[
                  "Ec2SchedulerLambdaRole",
                  "Arn"
               ]
            },
            "Runtime":"python3.6"
         }
      },
      "CloudWatchEODTrigger":{
         "Type":"AWS::Events::Rule",
         "Properties":{
            "Description":"CloudWatch event which which will trigger EC2 Scheduler After work hours",
            "ScheduleExpression":{
               "Fn::Join":[
                  "",
                  [
                     "cron(",
                     {
                        "Fn::If": ["EODValueEmpty", "0 19 ? * * *", "30 19 ? * * *"]
                     },
                     ")"
                  ]
               ]
            },
            "Targets":[ {
               "Arn": {
                  "Fn::GetAtt":[
                     "Ec2SchedulerLambda",
                     "Arn"
                  ]
               },
               "Id": "Ec2_Scheduler_target"
            }],
            "Name":"Ec2_Scheduler_EOD_Rule",
            "State":{
               "Fn::If": ["EODValueEmpty", "DISABLED", "ENABLED"]
            }
         }
      },
      "Ec2SchedulerEODLambda":{
         "Type":"AWS::Lambda::Function",
         "Properties":{
            "Code":{
               "ZipFile":{
                  "Fn::Join":[
                     "",
                     [
                        "import os\n",
                        "import boto3\n",
                        "import json\n",
                        "\n",
                        "def lambda_handler(event, context):\n",
                        "\n",
                        "    ec2Client = boto3.client('ec2')\n",
                        "    regions = [region['RegionName'] for region in ec2Client.describe_regions()['Regions']]\n",
                        "    #regions = ['eu-north-1']\n",
                        "\n",
                        "    for regionName in regions:\n",
                        "        print('~~~~~~Region:{0}~~~~~~'.format(regionName))\n",
                        "        ec2Client = boto3.client('ec2', region_name=regionName)\n",
                        "        response = ec2Client.describe_instances(MaxResults=1000)\n",
                        "        print (response)\n",
                        "\n",
                        "        instancesToStop = []\n",
                        "        for reservations in response['Reservations']:\n",
                        "            instanceId = ''\n",
                        "            instanceName = ''\n",
                        "            state = ''\n",
                        "            retainInstance = False\n",
                        "\n",
                        "            for instanceDetails in reservations['Instances']:\n",
                        "                instanceId = instanceDetails['InstanceId']\n",
                        "\n",
                        "                # ignore spot and scheduled instances\n",
                        "                if 'InstanceLifecycle' in instanceDetails.keys():\n",
                        "                    continue\n",
                        "\n",
                        "                state = instanceDetails['State']\n",
                        "                if 'Tags' in instanceDetails:\n",
                        "                    for tag in instanceDetails['Tags']:\n",
                        "                        if tag['Key'] == 'Name':\n",
                        "                            instanceName = tag['Value'] if tag['Value'] != '' else 'Instance with no name'\n",
                        "\n",
                        "                        if tag['Key'] == 'KeepAlive':\n",
                        "                            isKeepAlive = True if tag['Value'].lower() == 'true' else False\n",
                        "                            if isKeepAlive and state['Name'] == 'running':\n",
                        "                                print ('Instance {0} with keep alive tag -> ignoring'.format(instanceName))\n",
                        "                            else:\n",
                        "                                instancesToStop.append(instanceId)\n",
                        "                else:                \n",
                        "                    instancesToStop.append(instanceId)\n",
                        "                \n",
                        "        if (len (instancesToStop) <= 0):\n",
                        "            print ('No Instances found to stop')\n",
                        "        else:\n",
                        "            res = ec2Client.stop_instances(\n",
                        "                InstanceIds = instancesToStop,\n",
                        "                DryRun = False\n",
                        "            )\n",
                        "\n",
                        "        print ('~~~~~~Region {0} - End Of Day - Stopped {1} instnaces~~~~~~'.format(regionName, len(instancesToStop)))\n"
                     ]
                  ]
               }
            },
            "Description":"Lambda to Stop instances at the end of day",
            "FunctionName":"Ec2SchedulerEODLambda",
            "Handler":"index.lambda_handler",
            "Timeout": 60,
            "Role":{
               "Fn::GetAtt":[
                  "Ec2SchedulerLambdaRole",
                  "Arn"
               ]
            },
            "Runtime":"python3.6"
         }
      }
   },
   "Parameters":{
      "SchedulerMinutes":{
         "Type":"String",
         "Description":"Enter the number of minutes between events.",
         "Default":"15"
      },
      "EODTime":{
         "Type":"String",
         "Description":"Enter the time that all untagged instances will be shut down (Optional - Leave empty if not wanted).",
         "Default":"19:30"
      }
   },
   "Conditions":{
      "EODValueEmpty":{
         "Fn::Equals":[
            "",
            {
               "Ref":"EODTime"
            }
         ]
      }
   },
   "Metadata":{
      "AWS::CloudFormation::Interface":{
         "ParameterGroups":[
            {
               "Label":{
                  "default":"Lambda Scheduler"
               },
               "Parameters":[
                  "SchedulerMinutes",
                  "EODTime"
               ]
            }
         ],
         "ParameterLabels":{
            "SchedulerMinutes":{
               "default":"Lambda Intervals"
            },
            "EODTime":{
               "default":"End of day hour"
            }
         }
      }
   }
}